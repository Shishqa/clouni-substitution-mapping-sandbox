tosca_definitions_version: tosca_simple_yaml_1_3

metadata:
  template_name: "kubetos"
  template_author: "shishqa"
  template_version: "1.0"

imports:
  - profiles/etcd/main.yaml
  - profiles/cri/main.yaml
  - profiles/cni/main.yaml
  - profiles/kubernetes/main.yaml

topology_template:

  inputs:

    kubernetes_version:
      type: version
      default: 1.21.0

    cluster_name:
      type: string
      default: kubernetes-cluster

    pod_cidr:
      type: string
      default: 10.233.0.0/16

    service_cidr:
      type: string
      default: 10.32.0.0/16

    dns_ip:
      type: string
      default: 10.32.0.3

  node_templates:

    apiserver:
      type: kubetos.nodes.Kube.APIServer
      capabilities:
        access_address:
          properties:
            port: 6443
      properties:
        component_version: { get_input: [ kubernetes_version ] }
        service_cidr: { get_input: [ service_cidr ] }
      requirements:
        - host: kube_node
        - ca: kubernetes_ca_hosted
        - cert: kube_apiserver_cert_hosted
        - kubelet_client_cert: kube_apiserver_client_cert_hosted
        - service_account_cert: service_account_cert_hosted

    kube_apiserver_cert_hosted:
      type: kubetos.nodes.Artifact.Certificate
      properties:
        cert_path: /etc/kubernetes/pki/apiserver.crt
        key_path: /etc/kubernetes/pki/apiserver.key
      requirements:
        - cert: kube_apiserver_cert
        - host: kube_node

    kube_apiserver_cert:
      type: kubetos.nodes.Certificate
      properties:
        common_name: kubernetes
        organisation: kubernetes
        hostnames:
          - { get_attribute: [ SELF, dependency, tosca_name ] }
          # - { get_attribute: [ SELF, dependency, private_address ] }
          # - { get_attribute: [ SELF, dependency, public_address ] }
            #- 10.233.0.1
          - 10.32.0.1
          - 127.0.0.1
      requirements:
        - ca: kubernetes_ca
        - dependency: kube_node

    kube_apiserver_client_cert_hosted:
      type: kubetos.nodes.Artifact.Certificate
      properties:
        cert_path: /etc/kubernetes/pki/apiserver-kubelet-client.crt
        key_path: /etc/kubernetes/pki/apiserver-kubelet-client.key
      requirements:
        - cert: kube_apiserver_client_cert
        - host: kube_node

    kube_apiserver_client_cert:
      type: kubetos.nodes.Certificate
      properties:
        common_name: kubernetes
        organisation: system:masters
      requirements:
        - ca: kubernetes_ca

    service_account_cert_hosted:
      type: kubetos.nodes.Artifact.Certificate
      properties:
        cert_path: /etc/kubernetes/pki/sa.crt
        key_path: /etc/kubernetes/pki/sa.key
      requirements:
        - cert: service_account_cert
        - host: kube_node

    service_account_cert:
      type: kubetos.nodes.Certificate
      properties:
        common_name: service-accounts
        organisation: kubernetes
      requirements:
        - ca: kubernetes_ca

    kubernetes_ca_hosted:
      type: kubetos.nodes.Artifact.Certificate
      properties:
        cert_path: /etc/kubernetes/pki/ca.crt
        key_path: /etc/kubernetes/pki/ca.pem
      requirements:
        - cert: kubernetes_ca
        - host: kube_node

    kubernetes_ca:
      type: kubetos.nodes.CertificateAuthority
      properties:
        common_name: kubernetes-ca
        organisation: kubernetes

    kube_node:
      type: kubetos.nodes.Abstract.KubeNode
      directives:
        - substitute

  substitution_mappings:
    node_type: kubetos.nodes.Abstract.Kube.APIServer
    capabilities:
      access_address: [ apiserver, access_address ]
      # host: [ kube_node, host ]
      # os: [ kube_node, os ]
      # endpoint: [ kube_node, endpoint ]
      # scalable: [ kube_node, scalable ]
      # binding: [ kube_node, binding ]
    properties:
      component_version: [ kubernetes_version ]
      service_cidr: [ service_cidr ]
    # attributes:
    #   private_address: [ kube_node, private_address ]
    #   public_address: [ kube_node, public_address ]
    #   networks: [ kube_node, networks ]
    #   ports: [ kube_node, ports ]
    #   tosca_name: [ kube_node, tosca_name ]
    requirements:
      etcd: [ apiserver, etcd ]