tosca_definitions_version: tosca_simple_yaml_1_3

metadata:
  template_name: "kubetos"
  template_author: "shishqa"
  template_version: "1.0"

imports:
  - ../../profiles/etcd/main.yaml
  - ../../profiles/cri/main.yaml
  - ../../profiles/cni/main.yaml
  - ../../profiles/kubernetes/cluster.yaml
  - ../../profiles/kubernetes/resources.yaml

topology_template:

  inputs:

    kubernetes_version:
      type: version
      default: 1.21.0

    cluster_name:
      type: string
      default: kubernetes-cluster

    pod_cidr:
      type: string
      default: 10.233.0.0/16

    service_cidr:
      type: string
      default: 10.32.0.0/16

  node_templates:

    scheduler:
      type: kubetos.nodes.Kubernetes.Scheduler
      directives: [ substitute ]
      capabilities:
        client_cert:
          properties:
            common_name: system:kube-scheduler
            organisation: system:kube-scheduler
      properties:
        config_path: /etc/kubernetes/kube-scheduler.yaml
      requirements:
        - host: compute
        - apiserver:
            node: apiserver
            capability: access_endpoint
            relationship:
              type: tosca.relationships.ConnectsTo
              properties:
                credential:
                  # username: { get_property: [ SOURCE, client_cert, common_name ] }
                  token: { get_attribute: [ SOURCE, client_cert, cert ] }

    controller_manager:
      type: kubetos.nodes.Kubernetes.ControllerManager
      directives: [ substitute ]
      capabilities:
        client_cert:
          properties:
            common_name: system:kube-controller-manager
            organisation: system:kube-controller-manager
      properties:
        pod_cidr: { get_input: [ pod_cidr ] }
        service_cidr: { get_input: [ service_cidr ] }
      requirements:
        - host: compute
        - apiserver: apiserver
        - service_account_issuer: service_account_issuer
        - ca: ca

    apiserver:
      type: kubetos.nodes.Kubernetes.APIServer
      directives: [ substitute ]
      capabilities:
        kubelet_client_cert:
          properties:
            common_name: kubernetes
            organisation: system:masters
        tls_cert:
          properties:
            common_name: kubernetes
            organisation: kubernetes
            hostnames:
              - { get_attribute: [ compute, tosca_name ] }
              - { get_attribute: [ compute, private_address ] }
              - { get_attribute: [ compute, public_address ] }
                #- 10.233.0.1
              - 10.32.0.1
              - 127.0.0.1
      properties:
        service_cidr: { get_input: [ service_cidr ] }
      requirements:
        - host: compute
        - etcd: etcd
        - service_account_issuer: service_account_issuer
        - ca: ca

    service_account_issuer:
      type: kubetos.nodes.Kubernetes.ServiceAccoutIssuer
      # directives: [ substitute ]
      capabilities:
        cert:
          properties:
            common_name: service-accounts
            organisation: kubernetes
      requirements:
        - ca: ca

    etcd:
      type: kubetos.nodes.Etcd
      directives: [ substitute ]
      capabilities:
        access_address:
          properties:
            port: 2379
            api_version: v2
        peer_address:
          properties:
            port: 2380
      requirements:
        - host: compute

    compute:
      type: tosca.nodes.Compute
      directives: [ select ]

    ca:
      type: kubetos.nodes.CertificateAuthority
      directives: [ substitute ]
      capabilities:
        ca:
          properties:
            common_name: kubernetes-ca
            organisation: kubernetes

  substitution_mappings:
    node_type: kubetos.nodes.Kubernetes.ControlPlane
    capabilities:
      ca: [ ca, ca ]
      access_address: [ apiserver, access_address ]
      scalable: [ compute, scalable ]
    properties:
      kubernetes_version: [ kubernetes_version ]
      cluster_name: [ cluster_name ]
      pod_cidr: [ pod_cidr ]
      service_cidr: [ service_cidr ]
