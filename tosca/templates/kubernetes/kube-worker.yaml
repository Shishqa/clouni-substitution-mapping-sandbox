tosca_definitions_version: tosca_simple_yaml_1_3

metadata:
  template_name: "kubetos"
  template_author: "shishqa"
  template_version: "1.0"

imports:
  #- ../profiles/etcd/main.yaml
  - ../../profiles/kubernetes/cluster.yaml

topology_template:

  inputs:

    kubernetes_version:
      type: version

    pod_cidr:
      type: string
      default: 10.233.0.0/16

    service_cidr:
      type: string
      default: 10.32.0.0/16

    dns_ip:
      type: string
      default: 10.32.0.3

    static_pod_path:
      type: string
      default: /etc/kubernetes/manifests

  node_templates:

    kubelet:
      type: kubetos.nodes.Kubernetes.Kubelet
      directives: [ substitute ]
      capabilities:
        kubelet:
          properties:
            api_version: TODO
            dns_ip: { get_input: [ dns_ip ] }
            pod_cidr: { get_input: [ pod_cidr ] }
            static_pod_path: { get_input: [ static_pod_path ] }
        client_cert:
          properties:
            common_name:
              concat:
                - "system:node:"
                - { get_property: [ compute, host, name ] }
            organisation: system:nodes
            hostnames:
              - { get_property: [ compute, host, name ] }
              - { get_attribute: [ compute, private_address ] }
              - { get_attribute: [ compute, public_address ] }
              - 127.0.0.1
      properties:
        component_version: { get_input: [ kubernetes_version ] }
      requirements:
        - cri_runtime: cri
        - host: compute

    cri:
      type: kubetos.nodes.CRI
      directives: [ substitute ]
      requirements:
        - host: compute
        - cni: cni

    cni:
      type: kubetos.nodes.CNI
      directives: [ substitute ]
      requirements:
        - host: compute

    compute:
      type: tosca.nodes.Compute
      directives: [ select ]
      
  substitution_mappings:
    node_type: kubetos.nodes.Kubernetes.Worker
    capabilities:
      kubelet: [ kubelet, kubelet ]
      # endpoint: [ kubelet, endpoint ]
      # client_cert: [ kubelet, client_cert ]
    properties:
      kubernetes_version: [ kubernetes_version ]
    requirements:
      apiserver: [ kubelet, apiserver ]
