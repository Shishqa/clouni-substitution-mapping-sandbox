tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - ../cri/main.yaml
  - ../etcd/main.yaml
  - ../pki/main.yaml

capability_types:

  kubetos.capabilities.Kubelet:
    derived_from: tosca.capabilities.Container
    properties:
      static_pod_path:
        type: string
        required: false

  kubetos.capabilities.Kubernetes.Cluster:
    derived_from: tosca.capabilities.Root
    properties:
      name:
        type: string
        required: false

  kubetos.capabilities.Kubernetes.User:
    derived_from: tosca.capabilities.Root
    properties:
      name:
        type: string

  kubetos.capabilities.Kubernetes.APIServer:
    derived_from: tosca.capabilities.Root
    properties:
      service_cidr:
        type: string
    attributes:
      # dependent command line args

relationship_types:

  kubetos.relationships.Kubelet.UsesRuntime:
    derived_from: tosca.relationships.HostedOn
    interfaces:
      Configure:
        operations:
          pre_configure_target:
            # inputs:
            #   dns_ip:
            #     value: { get_property: [ SOURCE, dns_ip ] }
            #     type: string
            implementation:
              primary: ./ansible/kubelet-to-runtime--pre-configure-target.yaml
              dependencies:
                - ./ansible/files/resolved.conf.j2

node_types:

  kubetos.nodes.Kubernetes.APIServer:
    derived_from: tosca.nodes.SoftwareComponent


  kubetos.nodes.Kube.APIServer:
    derived_from: tosca.nodes.Root
    capabilities:
      access_address: tosca.capabilities.Endpoint
      scalable: tosca.capabilities.Scalable
    properties:
      service_cidr:
        type: string
    requirements:
      - etcd:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Etcd.Cluster
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, UNBOUNDED ]
      - ca:
          capability: kubetos.capabilities.Certificate
      - cert:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate
      - kubelet_client_cert:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate
      - service_account_cert:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate









  kubetos.nodes.Kubernetes.Cluster:
    derived_from: tosca.nodes.Root
    capabilities:
      cluster: kubetos.capabilities.Kubernetes.Cluster
    attributes:
      apiserver_address:
        type: string
        default: { get_attribute: [ SELF, apiserver, access_address, ip_address ] }
    requirements:
      - apiserver:
          capability: tosca.capabilities.Endpoint
          relationship: tosca.relationships.ConnectsTo
      - ca:
          capability: kubetos.capabilities.Certificate
          relationship: tosca.relationships.DependsOn

  kubetos.nodes.Kubernetes.User:
    derived_from: tosca.nodes.Root
    capabilities:
      user: kubetos.capabilities.Kubernetes.User
    requirements:
      - cert:
          capability: kubetos.capabilities.Certificate
          relationship: tosca.relationships.DependsOn

  kubetos.nodes.Artifact.Kubeconfig:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      path:
        type: string
    requirements:
      - kubeconfig:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Kubeconfig
          relationship: tosca.relationships.DependsOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              kubeconfig:
                value: { get_attribute: [ SELF, kubeconfig, conf ] }
                type: string
              path:
                value: { get_property: [ SELF, path ] }
                type: string
            implementation: ./ansible/kubeconfig-mirror--create.yaml

  kubetos.nodes.Kubeconfig:
    derived_from: tosca.nodes.Root
    attributes:
      conf:
        type: string
    requirements:
      - cluster:
          capability: kubetos.capabilities.Kubernetes.Cluster
          relationship: tosca.relationships.DependsOn
      - user:
          capability: kubetos.capabilities.Kubernetes.User
          relationship: tosca.relationships.DependsOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              user_name:
                value: { get_property: [ SELF, user, user, name ] }
                type: string
              cluster_name:
                value: { get_property: [ SELF, cluster, cluster, name ] }
                type: string
              ca_cert:
                value: { get_attribute: [ SELF, cluster, ca, cert ] }
                type: string
              cert:
                value: { get_attribute: [ SELF, user, cert, cert ] }
                type: string
              key:
                value: { get_attribute: [ SELF, user, cert, key ] }
                type: string
              apiserver_address:
                value: { get_attribute: [ SELF, cluster, apiserver_address ] }
                type: string
              apiserver_port:
                value: "6443"
                type: string
            outputs:
              kubeconfig: [ SELF, conf ]
            implementation:
              primary: ./ansible/kubeconfig--create.yaml

  kubetos.nodes.Kubectl:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      component_version:
        type: version
        default: 1.21.0
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          kubectl_version:
            value: { concat: [ "v", { get_property: [ SELF, component_version ] } ] }
            type: string
        operations:
          create:
            implementation:
              primary: ./ansible/kubectl--create.yaml
              dependencies:
                - kubectl_role
                - download_role
    artifacts:
      kubectl_role:
        file: ./ansible/roles/kubectl
        type: tosca.artifacts.File
        deploy_path: roles/kubectl
      download_role:
        file: utils/roles/download
        type: tosca.artifacts.File
        deploy_path: roles/download

  kubetos.nodes.Abstract.KubeNode:
    derived_from: tosca.nodes.Compute
    capabilities:
      kubelet: kubetos.capabilities.Kubelet
    properties:
      component_version:
        type: version
        default: 1.21.0
        required: false
      pod_cidr:
        type: string
        required: false
      dns_ip:
        type: string
        required: false

  kubetos.nodes.Kubelet:
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      kubelet: kubetos.capabilities.Kubelet
    properties:
      component_version:
        type: version
        default: 1.21.0
        required: false
      pod_cidr:
        type: string
        required: false
      dns_ip:
        type: string
        required: false
    requirements:
      - ca:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Certificate
      - cert:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Certificate
      - kubeconfig:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Kubeconfig
      - cri_runtime:
          capability: kubetos.capabilities.CRI
          relationship: kubetos.relationships.Kubelet.UsesRuntime
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          kubelet_version:
            value: { concat: [ "v", { get_property: [ SELF, component_version ] } ] }
            type: string
        operations:
          create:
            implementation:
              primary: ./ansible/kubelet--create.yaml
              dependencies:
                - kubelet_role
                - download_role
          configure:
            inputs:
              ip: { value: { get_attribute: [ SELF, host, private_address ] }, type: string }
              cri_socket: { value: { get_property: [ SELF, cri_runtime, cri, url_path ] }, type: string }
              kubelet_static_pod_path: { value: { get_property: [ SELF, kubelet, static_pod_path ] }, type: string }
              cert_path: { value: { get_property: [ SELF, cert, cert_path ] }, type: string }
              key_path: { value: { get_property: [ SELF, cert, key_path ] }, type: string }
              ca_cert_path: { value: { get_property: [ SELF, ca, cert_path ] }, type: string }
              kubeconfig_path: { value: { get_property: [ SELF, kubeconfig, path ] }, type: string }
              dns_ip: { value: { get_property: [ SELF, dns_ip ] }, type: string }
              pod_cidr: { value: { get_property: [ SELF, pod_cidr ] }, type: string }
            implementation:
              primary: ./ansible/kubelet--configure.yaml
              dependencies:
                - kubelet_role
          start:
            implementation:
              primary: ./ansible/kubelet--start.yaml
              dependencies:
                - kubelet_role
    artifacts:
      kubelet_role:
        file: ./ansible/roles/kubelet
        type: tosca.artifacts.File
        deploy_path: roles/kubelet
      download_role:
        file: utils/roles/download
        type: tosca.artifacts.File
        deploy_path: roles/download

  kubetos.nodes.Abstract.ControlPlane:
    derived_from: tosca.nodes.Root
    capabilities:
      access_address: tosca.capabilities.Endpoint
    properties:
      component_version:
        type: version
        default: 1.21.0
        required: false
      service_cidr:
        type: string
        required: false
      cluster_cidr:
        type: string
        required: false
        

  kubetos.nodes.Abstract.Cluster:
    derived_from: kubetos.nodes.Abstract.ControlPlane
    properties:
      dns_ip:
        type: string

  kubetos.nodes.Abstract.Kube.APIServer:
    derived_from: tosca.nodes.Root
    capabilities:
      access_address: tosca.capabilities.Endpoint
    properties:
      component_version:
        type: version
        default: 1.21.0
      service_cidr:
        type: string
    # requirements:
    #   - etcd:
    #       capability: tosca.capabilities.Node
    #       node: kubetos.nodes.Etcd.Cluster
    #       relationship: tosca.relationships.DependsOn
    #       occurrences: [ 1, UNBOUNDED ]

  kubetos.nodes.Kube.APIServer:
    derived_from: kubetos.nodes.Abstract.Kube.APIServer
    requirements:
      - etcd:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Etcd.Cluster
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, UNBOUNDED ]
      - ca:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate
      - cert:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate
      - kubelet_client_cert:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate
      - service_account_cert:
          capability: kubetos.capabilities.Certificate
          node: kubetos.nodes.Artifact.Certificate
      - host:
          capability: kubetos.capabilities.Kubelet
          relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          ca_cert_path:
            value: { get_property: [ SELF, ca, cert_path ] }
            type: string
          cert_path:
            value: { get_property: [ SELF, cert, cert_path ] }
            type: string
          key_path:
            value: { get_property: [ SELF, cert, key_path ] }
            type: string
          sa_cert_path:
            value: { get_property: [ SELF, service_account_cert, cert_path ] }
            type: string
          sa_key_path:
            value: { get_property: [ SELF, service_account_cert, key_path ] }
            type: string
          kubelet_client_cert_path:
            value: { get_property: [ SELF, kubelet_client_cert, cert_path ] }
            type: string
          kubelet_client_key_path:
            value: { get_property: [ SELF, kubelet_client_cert, key_path ] }
            type: string
          etcd_peers:
            value: { get_attribute: [ SELF, etcd, peers ] }
            type: list
            entry_schema:
              type: kubetos.datatypes.Etcd.PeerSpec
          kube_version:
            value: { concat: [ "v", { get_property: [ SELF, component_version ] } ] }
            type: string
          private_address:
            value: { get_attribute: [ SELF, host, host, private_address ] }
            type: string
          public_address:
            value: { get_attribute: [ SELF, host, host, public_address ] }
            type: string
          static_pod_path:
            value: { get_property: [ SELF, host, kubelet, static_pod_path ] }
            type: string
          service_cidr:
            value: { get_property: [ SELF, service_cidr ] }
            type: string
          apiserver_count:
            value: 1
            type: integer
        operations:
          start:
            implementation:
              primary: ./ansible/kube-apiserver--start.yaml
              dependencies:
                - ./ansible/files/kube-apiserver.yaml.j2

  kubetos.nodes.Abstract.Kube.Scheduler:
    derived_from: tosca.nodes.Root
    properties:
      component_version:
        type: version
        default: 1.21.0
      config_path:
        type: string

  kubetos.nodes.Kube.Scheduler:
    derived_from: kubetos.nodes.Abstract.Kube.Scheduler
    requirements:
      - kubeconfig:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Kubeconfig
      - host:
          capability: kubetos.capabilities.Kubelet
          relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          kube_version:
            value: { concat: [ "v", { get_property: [ SELF, component_version ] } ] }
            type: string
          static_pod_path: { value: { get_property: [ SELF, host, kubelet, static_pod_path ] }, type: string }
          config_path: { value: { get_property: [ SELF, config_path ] }, type: string }
        operations:
          start:
            inputs:
              kubeconfig_path: { value: { get_property: [ SELF, kubeconfig, path ] }, type: string }
            implementation:
              primary: ./ansible/kube-scheduler--start.yaml
              dependencies:
                - ./ansible/files/kube-scheduler.yaml.j2
                - ./ansible/files/kube-scheduler.config.yaml.j2

  kubetos.nodes.Abstract.Kube.ControllerManager:
    derived_from: tosca.nodes.Root
    properties:
      component_version:
        type: version
        default: 1.21.0
      cluster_cidr:
        type: string
      service_cidr:
        type: string

  kubetos.nodes.Kube.ControllerManager:
    derived_from: kubetos.nodes.Abstract.Kube.ControllerManager
    properties:
      component_version:
        type: version
        default: 1.21.0
      cluster_cidr:
        type: string
      service_cidr:
        type: string
    requirements:
      - ca:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Certificate
      - service_account_cert:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Certificate
      - kubeconfig:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Artifact.Kubeconfig
      - host:
          capability: kubetos.capabilities.Kubelet
          relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          kube_version:
            value: { concat: [ "v", { get_property: [ SELF, component_version ] } ] }
            type: string
          static_pod_path: { value: { get_property: [ SELF, host, kubelet, static_pod_path ] }, type: string }
          cluster_cidr: { value: { get_property: [ SELF, cluster_cidr ] }, type: string }
          service_cidr: { value: { get_property: [ SELF, service_cidr ] }, type: string }
          ca_cert_path:
            value: { get_property: [ SELF, ca, cert_path ] }
            type: string
          ca_key_path:
            value: { get_property: [ SELF, ca, key_path ] }
            type: string
          sa_key_path:
            value: { get_property: [ SELF, service_account_cert, key_path ] }
            type: string
        operations:
          start:
            inputs:
              kubeconfig_path: { value: { get_property: [ SELF, kubeconfig, path ] }, type: string }
            implementation:
              primary: ./ansible/kube-controller-manager--start.yaml
              dependencies:
                - ./ansible/files/kube-controller-manager.yaml.j2
